name: Auto Tag on Merge or Push to Main

on:
  pull_request:
    types: [closed]
    branches:
      - main

  push:
    branches:
      - main

permissions:
  contents: write
  pull-requests: read

jobs:
  zap_scan:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Create directories for ZAP
        run: |
          mkdir -p zap-reports zap-home
          chmod -R 777 zap-reports zap-home  # Ensure write permissions

      - name: Run ZAP scan
        run: |
          echo "Starting ZAP scan..."
          docker run -v $(pwd)/zap-reports:/zap/wrk:rw -v $(pwd)/zap-home:/zap/.ZAP:rw ghcr.io/zaproxy/zaproxy:stable zap.sh -cmd -quickurl https://your-target-app.com -quickout /zap/wrk/report.html
          echo "ZAP scan completed"
          ls -la zap-reports/

      - name: Check ZAP scan results
        run: |
          echo "=== ZAP Scan Results ==="
          ls -la zap-reports/
          if [ -f zap-reports/report.html ]; then
            echo "HTML report generated successfully"
          else
            echo "Warning: HTML report not found"
          fi

      - name: Upload ZAP scan reports
        uses: actions/upload-artifact@v4
        with:
          name: zap-scan-reports-50
          path: zap-reports/
          if-no-files-found: warn
          retention-days: 30
          compression-level: 6
          overwrite: false
          include-hidden-files: false

  tag_on_pr_merge:
    if: github.event_name == 'pull_request' && github.event.pull_request.merged == true
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Get latest tag
        id: get_latest_tag
        run: |
          git fetch --tags
          latest_tag=$(git describe --tags --abbrev=0 2>/dev/null || echo "v0.0.0")
          echo "latest_tag=$latest_tag" >> $GITHUB_ENV

      - name: Determine release type and message
        id: determine_release_type
        run: |
          title="${{ github.event.pull_request.title }}"
          labels="${{ toJson(github.event.pull_request.labels.*.name) }}"

          if echo "$title" | grep -iq hotfix || echo "$labels" | grep -iq hotfix; then
            echo "release_type=patch" >> $GITHUB_ENV
            echo "tag_message=Patch release" >> $GITHUB_ENV
          else
            echo "release_type=major" >> $GITHUB_ENV
            echo "tag_message=Major release" >> $GITHUB_ENV
          fi

      - name: Calculate next tag
        id: calculate_next_tag
        run: |
          version="${{ env.latest_tag }}"
          version="${version#v}"
          IFS='.' read -r major minor patch <<< "$version"

          case "${{ env.release_type }}" in
            patch)
              patch=$((patch + 1))
              ;;
            major)
              major=$((major + 1))
              minor=0
              patch=0
              ;;
          esac

          next_tag="v$major.$minor.$patch"

          while git rev-parse "$next_tag" >/dev/null 2>&1; do
            patch=$((patch + 1))
            next_tag="v$major.$minor.$patch"
          done

          echo "next_tag=$next_tag" >> $GITHUB_ENV

      - name: Create and push tag
        run: |
          git config user.name "github-actions"
          git config user.email "actions@github.com"

          tag_msg="${{ env.tag_message }} ${{ env.next_tag }} from PR #${{ github.event.pull_request.number }}: ${{ github.event.pull_request.title }}"
          git tag -a "${{ env.next_tag }}" -m "$tag_msg"
          git push origin "${{ env.next_tag }}"
        continue-on-error: true

  tag_on_direct_push:
    if: github.event_name == 'push' && github.actor != 'web-flow'
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Get latest tag
        id: get_latest_tag
        run: |
          git fetch --tags
          latest_tag=$(git describe --tags --abbrev=0 2>/dev/null || echo "v0.0.0")
          echo "latest_tag=$latest_tag" >> $GITHUB_ENV

      - name: Calculate next minor tag
        id: calculate_next_tag
        run: |
          version="${{ env.latest_tag }}"
          version="${version#v}"
          IFS='.' read -r major minor patch <<< "$version"

          minor=$((minor + 1))
          patch=0
          next_tag="v$major.$minor.$patch"

          while git rev-parse "$next_tag" >/dev/null 2>&1; do
            patch=$((patch + 1))
            next_tag="v$major.$minor.$patch"
          done

          echo "next_tag=$next_tag" >> $GITHUB_ENV

      - name: Create and push tag
        run: |
          git config user.name "github-actions"
          git config user.email "actions@github.com"

          msg=$(git log -1 --pretty=%B)
          tag_msg="Minor release ${{ env.next_tag }} from direct push: $msg"
          git tag -a "${{ env.next_tag }}" -m "$tag_msg"
          git push origin "${{ env.next_tag }}"
        continue-on-error: true
