name: Auto Tag on Merge or Push to Main

on:
  pull_request:
    types: [closed]
    branches:
      - main

  push:
    branches:
      - main

permissions:
  contents: write
  pull-requests: read

jobs:
  create_tag_on_pr_merge:
    if: github.event_name == 'pull_request' && github.event.pull_request.merged == true
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Get latest tag
        id: get_latest_tag
        run: |
          git fetch --tags
          latest_tag=$(git describe --tags --abbrev=0 2>/dev/null || echo "v0.0.0")
          echo "latest_tag=$latest_tag" >> $GITHUB_ENV

      - name: Determine release type from PR
        id: determine_release_type
        run: |
          title="${{ github.event.pull_request.title }}"
          labels="${{ toJson(github.event.pull_request.labels.*.name) }}"

          if echo "$title" | grep -iq hotfix || echo "$labels" | grep -iq hotfix; then
            echo "release_type=patch" >> $GITHUB_ENV
          else
            echo "release_type=major" >> $GITHUB_ENV
          fi

      - name: Calculate next tag
        id: calculate_next_tag
        run: |
          version="${{ env.latest_tag }}"
          version="${version#v}"
          IFS='.' read -r major minor patch <<< "$version"

          case "${{ env.release_type }}" in
            major)
              next_tag="v$((major + 1)).0.0"
              ;;
            patch)
              next_tag="v$major.$minor.$((patch + 1))"
              ;;
          esac

          while git rev-parse "$next_tag" >/dev/null 2>&1; do
            patch=$((patch + 1))
            next_tag="v$major.$minor.$patch"
          done

          echo "next_tag=$next_tag" >> $GITHUB_ENV

      - name: Create and push tag
        run: |
          git config user.name "github-actions"
          git config user.email "actions@github.com"

          tag_message="${{ env.release_type^ }} release ${{ env.next_tag }} from PR #${{ github.event.pull_request.number }}: ${{ github.event.pull_request.title }}"

          git tag -a ${{ env.next_tag }} -m "$tag_message"
          git push origin ${{ env.next_tag }} || echo "Tag already exists"
        continue-on-error: true

  create_tag_on_direct_push:
    if: github.event_name == 'push' && !contains(github.event.head_commit.message, 'Merge pull request')
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Get latest tag
        id: get_latest_tag
        run: |
          git fetch --tags
          latest_tag=$(git describe --tags --abbrev=0 2>/dev/null || echo "v0.0.0")
          echo "latest_tag=$latest_tag" >> $GITHUB_ENV

      - name: Calculate next minor version tag
        id: calculate_next_tag
        run: |
          version="${{ env.latest_tag }}"
          version="${version#v}"
          IFS='.' read -r major minor patch <<< "$version"

          minor=$((minor + 1))
          patch=0
          next_tag="v$major.$minor.$patch"

          while git rev-parse "$next_tag" >/dev/null 2>&1; do
            patch=$((patch + 1))
            next_tag="v$major.$minor.$patch"
          done

          echo "next_tag=$next_tag" >> $GITHUB_ENV

      - name: Create and push tag
        run: |
          git config user.name "github-actions"
          git config user.email "actions@github.com"

          commit_msg=$(git log -1 --pretty=%B)
          tag_message="Minor release ${{ env.next_tag }} from direct push: ${commit_msg}"

          git tag -a ${{ env.next_tag }} -m "$tag_message"
          git push origin ${{ env.next_tag }} || echo "Tag already exists"
        continue-on-error: true
