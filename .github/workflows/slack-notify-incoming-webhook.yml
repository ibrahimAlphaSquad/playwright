name: Slack incoming-webhook PR Notifications
on:
  pull_request:
    types:
      - opened
      - closed
      - reopened
      - synchronize
      # - locked
      # - unlocked
      - edited 
      # - assigned
      # - unassigned
      # - labeled
      # - unlabeled
      - converted_to_draft
      - ready_for_review
      - review_requested
      - review_request_removed
  pull_request_review:
    types:
      - submitted
      - edited
      - dismissed
  pull_request_review_comment:
    types:
      - created
      - edited
      - deleted
  discussion:
    types:
      - created
      - edited
      - deleted
      - answered
      - unanswered
  discussion_comment:
    types:
      - created
      - edited
      - deleted

env:
  SLACK_CHANNEL: alpha-pr-review
  COLOR_PR_OPENED: "#28a745"
  COLOR_PR_MERGED: "#6f42c1"
  COLOR_PR_CLOSED: "#dc3545"
  COLOR_PR_REOPENED: "#ffc107"
  COLOR_PR_SYNCHRONIZED: "#17a2b8"
  COLOR_PR_REVIEW: "#007bff"
  COLOR_PR_COMMENT: "#28a745"
  COLOR_UNKNOWN: "#ffc107"
  
  # Add an API endpoint for the Slack messages API
  SLACK_API_URL: "https://slack.com/api/chat.postMessage"

jobs:
  notify:
    environment:
      name: Production
    runs-on: ubuntu-latest
    steps:
      # For synchronize events, fetch the latest commit message using GitHub API
      - name: Get commit message for synchronize event
        if: github.event_name == 'pull_request' && github.event.action == 'synchronize'
        id: get-commit-message
        env:
          GH_TOKEN: ${{ github.token }}
        run: |
          # Get the head commit SHA
          HEAD_SHA="${{ github.event.pull_request.head.sha }}"
          
          # Use GitHub CLI to get commit info
          COMMIT_INFO=$(gh api repos/${{ github.repository }}/commits/${HEAD_SHA})
          
          # Extract the commit message
          COMMIT_MSG=$(echo $COMMIT_INFO | jq -r '.commit.message')
          
          # Escape newlines and other special chars for GitHub Actions
          COMMIT_MSG=$(echo "$COMMIT_MSG" | tr '\n' ' ' | sed 's/"/\\"/g')
          
          # Set output - save commit message in a way that handles multiline messages
          echo "COMMIT_MESSAGE<<EOF" >> $GITHUB_ENV
          echo "$COMMIT_MSG" >> $GITHUB_ENV
          echo "EOF" >> $GITHUB_ENV
          
          # For debugging
          echo "Retrieved commit message for SHA: ${HEAD_SHA}"

      # Query Slack to check for existing messages
      - name: Check for existing Slack messages
        if: github.event_name == 'pull_request' && github.event.action != 'opened'
        id: check-slack-messages
        env:
          SLACK_BOT_TOKEN: ${{ secrets.SLACK_BOT_TOKEN }}
        run: |
          # Format a search query to find messages about this PR
          PR_NUMBER="${{ github.event.pull_request.number }}"
          REPO_NAME="${{ github.repository }}"
          SEARCH_QUERY="in:${SLACK_CHANNEL} \"${REPO_NAME}\" \"#${PR_NUMBER}\""
          
          echo "Searching for existing messages with query: $SEARCH_QUERY"
          
          # Search for messages
          SEARCH_RESPONSE=$(curl -s -X POST \
            -H "Authorization: Bearer $SLACK_BOT_TOKEN" \
            -H "Content-Type: application/x-www-form-urlencoded" \
            --data-urlencode "query=$SEARCH_QUERY" \
            --data-urlencode "sort=timestamp" \
            --data-urlencode "sort_dir=desc" \
            --data-urlencode "count=1" \
            "https://slack.com/api/search.messages")
          
          # Check if we found a message
          TOTAL_MATCHES=$(echo $SEARCH_RESPONSE | jq -r '.messages.total')
          
          if [ "$TOTAL_MATCHES" -gt 0 ]; then
            # Get the timestamp of the first message (should be the original PR notification)
            THREAD_TS=$(echo $SEARCH_RESPONSE | jq -r '.messages.matches[0].ts')
            echo "Found existing message with timestamp: $THREAD_TS"
            echo "THREAD_TS=$THREAD_TS" >> $GITHUB_ENV
            echo "IS_THREADED_REPLY=true" >> $GITHUB_ENV
          else
            echo "No existing messages found for this PR"
            echo "IS_THREADED_REPLY=false" >> $GITHUB_ENV
          fi

      - name: Set event message
        id: event-message
        run: |
          # Common PR details that will be included in most messages
          PR_DETAILS="*Title:* ${{ github.event.pull_request.title }}\n*Branch:* ${{ github.event.pull_request.head.ref }} → ${{ github.event.pull_request.base.ref }}\n*Author:* ${{ github.event.pull_request.user.login }}\n*Created:* $(date -d "${{ github.event.pull_request.created_at }}" "+%Y-%m-%d %H:%M:%S UTC")"
          
          if [[ "${{ github.event_name }}" == "pull_request" && "${{ github.event.action }}" == "opened" ]]; then
            # Get PR body for description
            PR_BODY="${{ github.event.pull_request.body }}"
            # Truncate PR description to avoid too long messages
            TRUNCATED_BODY="${PR_BODY:0:200}${PR_BODY:200:+...}"
            
            # Details for new PR
            echo "MESSAGE=🟢 *New PR opened by ${{ github.event.pull_request.user.login }}*\n\n${PR_DETAILS}\n\n*Description:* ${TRUNCATED_BODY}" >> $GITHUB_ENV
            echo "COLOR=${{ env.COLOR_PR_OPENED }}" >> $GITHUB_ENV
            
          elif [[ "${{ github.event_name }}" == "pull_request" && "${{ github.event.action }}" == "closed" && "${{ github.event.pull_request.merged }}" == "true" ]]; then
            # Details for merged PR
            MERGE_DETAILS="*Merged by:* ${{ github.event.sender.login }}\n*Merge time:* $(date -d "${{ github.event.pull_request.merged_at }}" "+%Y-%m-%d %H:%M:%S UTC")"
            echo "MESSAGE=🟣 *PR merged by ${{ github.event.sender.login }}*\n\n${PR_DETAILS}\n\n${MERGE_DETAILS}" >> $GITHUB_ENV
            echo "COLOR=${{ env.COLOR_PR_MERGED }}" >> $GITHUB_ENV
            
          elif [[ "${{ github.event_name }}" == "pull_request" && "${{ github.event.action }}" == "closed" ]]; then
            # Details for closed PR without merging
            CLOSE_DETAILS="*Closed by:* ${{ github.event.sender.login }}\n*Close time:* $(date -d "${{ github.event.pull_request.closed_at }}" "+%Y-%m-%d %H:%M:%S UTC")"
            echo "MESSAGE=🔴 *PR closed without merging by ${{ github.event.sender.login }}*\n\n${PR_DETAILS}\n\n${CLOSE_DETAILS}" >> $GITHUB_ENV
            echo "COLOR=${{ env.COLOR_PR_CLOSED }}" >> $GITHUB_ENV
            
          elif [[ "${{ github.event_name }}" == "pull_request" && "${{ github.event.action }}" == "reopened" ]]; then
            # Details for reopened PR
            REOPEN_DETAILS="*Reopened by:* ${{ github.event.sender.login }}\n*Reopen time:* $(date "+%Y-%m-%d %H:%M:%S UTC")"
            echo "MESSAGE=🟡 *PR reopened by ${{ github.event.sender.login }}*\n\n${PR_DETAILS}\n\n${REOPEN_DETAILS}" >> $GITHUB_ENV
            echo "COLOR=${{ env.COLOR_PR_REOPENED }}" >> $GITHUB_ENV
            
          elif [[ "${{ github.event_name }}" == "pull_request" && "${{ github.event.action }}" == "synchronize" ]]; then
            # For synchronize events, just include a simpler message for threaded replies
            echo "MESSAGE=🔵 *New commits pushed by ${{ github.event.sender.login }}*\n\n*Commit SHA:* \`${{ github.event.pull_request.head.sha }}\`\n*Commit message:* ${{ env.COMMIT_MESSAGE }}" >> $GITHUB_ENV
            echo "COLOR=${{ env.COLOR_PR_SYNCHRONIZED }}" >> $GITHUB_ENV

          elif [[ "${{ github.event_name }}" == "pull_request" && "${{ github.event.action }}" == "edited" ]]; then
            # Details for edited PR
            EDIT_DETAILS="*Edited by:* ${{ github.event.sender.login }}\n*Edit time:* $(date "+%Y-%m-%d %H:%M:%S UTC")"
            # Check what was edited
            if [[ "${{ github.event.changes.title }}" != "" ]]; then
              EDIT_DETAILS="${EDIT_DETAILS}\n*Title changed:* ${{ github.event.changes.title.from }} → ${{ github.event.pull_request.title }}"
            fi
            if [[ "${{ github.event.changes.body }}" != "" ]]; then
              EDIT_DETAILS="${EDIT_DETAILS}\n*Description edited*"
            fi
            echo "MESSAGE=📝 *PR edited by ${{ github.event.sender.login }}*\n\n${PR_DETAILS}\n\n${EDIT_DETAILS}" >> $GITHUB_ENV
            echo "COLOR=${{ env.COLOR_UNKNOWN }}" >> $GITHUB_ENV

          elif [[ "${{ github.event_name }}" == "pull_request" && "${{ github.event.action }}" == "converted_to_draft" ]]; then
            # Details for draft conversion
            DRAFT_DETAILS="*Converted by:* ${{ github.event.sender.login }}\n*Time:* $(date "+%Y-%m-%d %H:%M:%S UTC")"
            echo "MESSAGE=📝 *PR converted to draft by ${{ github.event.sender.login }}*\n\n${PR_DETAILS}\n\n${DRAFT_DETAILS}" >> $GITHUB_ENV
            echo "COLOR=${{ env.COLOR_UNKNOWN }}" >> $GITHUB_ENV

          elif [[ "${{ github.event_name }}" == "pull_request" && "${{ github.event.action }}" == "ready_for_review" ]]; then
            # Details for ready for review
            READY_DETAILS="*Marked ready by:* ${{ github.event.sender.login }}\n*Time:* $(date "+%Y-%m-%d %H:%M:%S UTC")"
            echo "MESSAGE=✅ *PR marked ready for review by ${{ github.event.sender.login }}*\n\n${PR_DETAILS}\n\n${READY_DETAILS}" >> $GITHUB_ENV
            echo "COLOR=${{ env.COLOR_PR_OPENED }}" >> $GITHUB_ENV

          elif [[ "${{ github.event_name }}" == "pull_request" && "${{ github.event.action }}" == "review_requested" ]]; then
            # Details for review request
            REVIEWER=""
            if [[ -n "${{ github.event.requested_reviewer.login }}" ]]; then
              REVIEWER="${{ github.event.requested_reviewer.login }}"
            elif [[ -n "${{ github.event.requested_team.name }}" ]]; then
              REVIEWER="team ${{ github.event.requested_team.name }}"
            fi
            REVIEW_DETAILS="*Reviewer:* ${REVIEWER}\n*Requested by:* ${{ github.event.sender.login }}\n*Time:* $(date "+%Y-%m-%d %H:%M:%S UTC")"
            echo "MESSAGE=👀 *Review requested from ${REVIEWER} by ${{ github.event.sender.login }}*\n\n${PR_DETAILS}\n\n${REVIEW_DETAILS}" >> $GITHUB_ENV
            echo "COLOR=${{ env.COLOR_PR_REVIEW }}" >> $GITHUB_ENV

          elif [[ "${{ github.event_name }}" == "pull_request_review" && "${{ github.event.action }}" == "submitted" ]]; then
            # Details for PR review
            REVIEW_STATE="${{ github.event.review.state }}"
            REVIEW_ICON="💬"
            if [[ "${REVIEW_STATE}" == "approved" ]]; then
              REVIEW_ICON="✅"
            elif [[ "${REVIEW_STATE}" == "changes_requested" ]]; then
              REVIEW_ICON="❌"
            fi
            
            # Get truncated review body
            REVIEW_BODY="${{ github.event.review.body }}"
            TRUNCATED_REVIEW="${REVIEW_BODY:0:150}${REVIEW_BODY:150:+...}"
            
            REVIEW_DETAILS="*Reviewer:* ${{ github.event.review.user.login }}\n*State:* ${REVIEW_STATE}\n*Time:* $(date -d "${{ github.event.review.submitted_at }}" "+%Y-%m-%d %H:%M:%S UTC")"
            if [[ -n "${TRUNCATED_REVIEW}" ]]; then
              REVIEW_DETAILS="${REVIEW_DETAILS}\n*Comment:* ${TRUNCATED_REVIEW}"
            fi
            
            echo "MESSAGE=${REVIEW_ICON} *Review ${REVIEW_STATE} by ${{ github.event.review.user.login }}*\n\n${PR_DETAILS}\n\n${REVIEW_DETAILS}" >> $GITHUB_ENV
            echo "COLOR=${{ env.COLOR_PR_REVIEW }}" >> $GITHUB_ENV

          elif [[ "${{ github.event_name }}" == "pull_request_review_comment" ]]; then
            # Details for PR review comment
            # For comments, truncate them to a reasonable length
            COMMENT="${{ github.event.comment.body }}"
            TRUNCATED_COMMENT="${COMMENT:0:150}${COMMENT:150:+...}"
            
            COMMENT_DETAILS="*Commenter:* ${{ github.event.comment.user.login }}\n*Time:* $(date -d "${{ github.event.comment.created_at }}" "+%Y-%m-%d %H:%M:%S UTC")\n*Path:* ${{ github.event.comment.path }}${github.event.comment.line:+:${{ github.event.comment.line }}}"
            
            VERB="added"
            if [[ "${{ github.event.action }}" == "edited" ]]; then
              VERB="edited"
              COMMENT_DETAILS="${COMMENT_DETAILS}\n*Edited at:* $(date "+%Y-%m-%d %H:%M:%S UTC")"
            elif [[ "${{ github.event.action }}" == "deleted" ]]; then
              VERB="deleted"
            fi
            
            if [[ "${{ github.event.action }}" != "deleted" ]]; then
              COMMENT_DETAILS="${COMMENT_DETAILS}\n*Comment:* ${TRUNCATED_COMMENT}"
            fi
            
            echo "MESSAGE=💬 *PR comment ${VERB} by ${{ github.event.comment.user.login }}*\n\n${PR_DETAILS}\n\n${COMMENT_DETAILS}" >> $GITHUB_ENV
            echo "COLOR=${{ env.COLOR_PR_COMMENT }}" >> $GITHUB_ENV

          elif [[ "${{ github.event_name }}" == "discussion" || "${{ github.event_name }}" == "discussion_comment" ]]; then
            # Handle Discussion events
            DISCUSSION_TITLE="${{ github.event.discussion.title }}"
            DISCUSSION_URL="${{ github.event.discussion.html_url }}"
            DISCUSSION_NUMBER="${{ github.event.discussion.number }}"
            
            DISCUSSION_DETAILS="*Title:* ${DISCUSSION_TITLE}\n*URL:* ${DISCUSSION_URL}\n*Author:* ${{ github.event.discussion.user.login }}"
            
            DISCUSSION_ACTION="${{ github.event.action }}"
            ACTION_ICON="💬"
            if [[ "${DISCUSSION_ACTION}" == "created" ]]; then
              ACTION_ICON="🆕"
            elif [[ "${DISCUSSION_ACTION}" == "answered" ]]; then
              ACTION_ICON="✅"
            elif [[ "${DISCUSSION_ACTION}" == "unanswered" ]]; then
              ACTION_ICON="❓"
            fi
            
            # For comment events
            if [[ "${{ github.event_name }}" == "discussion_comment" ]]; then
              COMMENT="${{ github.event.comment.body }}"
              TRUNCATED_COMMENT="${COMMENT:0:150}${COMMENT:150:+...}"
              
              COMMENT_VERB="added"
              if [[ "${{ github.event.action }}" == "edited" ]]; then
                COMMENT_VERB="edited"
              elif [[ "${{ github.event.action }}" == "deleted" ]]; then
                COMMENT_VERB="deleted"
              fi
              
              DISCUSSION_DETAILS="${DISCUSSION_DETAILS}\n*Comment ${COMMENT_VERB} by:* ${{ github.event.comment.user.login }}\n*Time:* $(date -d "${{ github.event.comment.created_at }}" "+%Y-%m-%d %H:%M:%S UTC")"
              
              if [[ "${{ github.event.action }}" != "deleted" ]]; then
                DISCUSSION_DETAILS="${DISCUSSION_DETAILS}\n*Comment:* ${TRUNCATED_COMMENT}"
              fi
              
              echo "MESSAGE=${ACTION_ICON} *Discussion comment ${COMMENT_VERB}*\n\n${DISCUSSION_DETAILS}" >> $GITHUB_ENV
            else
              echo "MESSAGE=${ACTION_ICON} *Discussion ${DISCUSSION_ACTION}*\n\n${DISCUSSION_DETAILS}" >> $GITHUB_ENV
            fi
            
            echo "COLOR=${{ env.COLOR_UNKNOWN }}" >> $GITHUB_ENV
            
          else
            # Unknown events
            echo "MESSAGE=⚪ *${{ github.event.action }} event on PR*\n\n${PR_DETAILS}" >> $GITHUB_ENV
            echo "COLOR=${{ env.COLOR_UNKNOWN }}" >> $GITHUB_ENV
          fi

          # Set current Unix timestamp for the message
          echo "TIMESTAMP=$(date +%s)" >> $GITHUB_ENV

      # Send to Slack with thread_ts when it's a reply
      - name: Set Slack title and link environment variables
        run: |
          if [[ "${{ github.event_name }}" == "discussion" || "${{ github.event_name }}" == "discussion_comment" ]]; then
            echo "TITLE=${{ github.event.discussion.title }}" >> $GITHUB_ENV
            echo "NUMBER=${{ github.event.discussion.number }}" >> $GITHUB_ENV
            echo "TITLE_LINK=${{ github.event.discussion.html_url }}" >> $GITHUB_ENV
          else
            echo "TITLE=${{ github.event.pull_request.title }}" >> $GITHUB_ENV
            echo "NUMBER=${{ github.event.pull_request.number }}" >> $GITHUB_ENV
            echo "TITLE_LINK=${{ github.event.pull_request.html_url }}" >> $GITHUB_ENV
          fi

      - name: Send Slack notification
        uses: slackapi/slack-github-action@v2.0.0
        with:
          # Use different payloads based on whether this is a threaded reply
          payload: |
            {
              "channel": "${{ env.SLACK_CHANNEL }}",
              "attachments": [
                {
                  "color": "${{ env.COLOR }}",
                  "pretext": "*${{ github.repository }}*",
                  "title": "${{ github.event_name == 'discussion' || github.event_name == 'discussion_comment' && github.event.discussion.title || github.event.pull_request.title }} #${{ github.event_name == 'discussion' || github.event_name == 'discussion_comment' && github.event.discussion.number || github.event.pull_request.number }}",
                  "title_link": "${{ github.event_name == 'discussion' || github.event_name == 'discussion_comment' && github.event.discussion.html_url || github.event.pull_request.html_url }}",
                  "text": "${{ env.MESSAGE }}",
                  "footer": "GitHub Actions",
                  "footer_icon": "https://github.githubassets.com/images/modules/logos_page/GitHub-Mark.png",
                  "mrkdwn_in": ["text", "pretext"],
                  "ts": "${{ env.TIMESTAMP }}"
                }
              ]
              ${{ env.IS_THREADED_REPLY == 'true' && format(',
              "thread_ts": "{0}"', env.THREAD_TS) || '' }}
            }
          webhook: ${{ secrets.SLACK_INCOMING_WEBHOOK_WEBHOOK_URL }}
          webhook-type: incoming-webhook