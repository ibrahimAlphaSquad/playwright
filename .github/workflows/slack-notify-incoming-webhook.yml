name: Slack incoming-webhook PR Notifications
on:
  pull_request:
    types:
      - opened
      - closed
      - reopened
      - synchronize
  pull_request_review:
    types:
      - submitted
  pull_request_review_comment:
    types:
      - created

env:
  SLACK_CHANNEL: alpha-pr-review
  COLOR_PR_OPENED: "#28a745"
  COLOR_PR_MERGED: "#6f42c1"
  COLOR_PR_CLOSED: "#dc3545"
  COLOR_PR_REOPENED: "#ffc107"
  COLOR_PR_SYNCHRONIZED: "#17a2b8"
  COLOR_PR_REVIEW: "#007bff"
  COLOR_PR_COMMENT: "#28a745"
  COLOR_UNKNOWN: "#ffc107"

jobs:
  notify:
    runs-on: ubuntu-latest
    steps:
      # First, create a step that determines the event type and message to display
      - name: Set event message
        id: event-message
        run: |
          if [[ "${{ github.event_name }}" == "pull_request" && "${{ github.event.action }}" == "opened" ]]; then
            echo "MESSAGE=ðŸŸ¢ New PR opened by *${{ github.event.pull_request.user.login }}*" >> $GITHUB_ENV
            echo "COLOR=${{ env.COLOR_PR_OPENED }}" >> $GITHUB_ENV
          elif [[ "${{ github.event_name }}" == "pull_request" && "${{ github.event.action }}" == "closed" && "${{ github.event.pull_request.merged }}" == "true" ]]; then
            echo "MESSAGE=ðŸŸ£ PR merged by *${{ github.event.sender.login }}*" >> $GITHUB_ENV
            echo "COLOR=${{ env.COLOR_PR_MERGED }}" >> $GITHUB_ENV
          elif [[ "${{ github.event_name }}" == "pull_request" && "${{ github.event.action }}" == "closed" ]]; then
            echo "MESSAGE=ðŸ”´ PR closed without merging by *${{ github.event.sender.login }}*" >> $GITHUB_ENV
            echo "COLOR=${{ env.COLOR_PR_CLOSED }}" >> $GITHUB_ENV
          elif [[ "${{ github.event_name }}" == "pull_request" && "${{ github.event.action }}" == "reopened" ]]; then
            echo "MESSAGE=ðŸŸ¡ PR reopened by *${{ github.event.sender.login }}*" >> $GITHUB_ENV
            echo "COLOR=${{ env.COLOR_PR_REOPENED }}" >> $GITHUB_ENV
          elif [[ "${{ github.event_name }}" == "pull_request" && "${{ github.event.action }}" == "synchronize" ]]; then
            echo "MESSAGE=ðŸ”µ PR updated with new commits by *${{ github.event.sender.login }}*" >> $GITHUB_ENV
            echo "COLOR=${{ env.COLOR_PR_SYNCHRONIZED }}" >> $GITHUB_ENV
          elif [[ "${{ github.event_name }}" == "pull_request_review" ]]; then
            echo "MESSAGE=ðŸ‘€ Review *${{ github.event.review.state }}* by *${{ github.event.review.user.login }}*" >> $GITHUB_ENV
            echo "COLOR=${{ env.COLOR_PR_REVIEW }}" >> $GITHUB_ENV
          elif [[ "${{ github.event_name }}" == "pull_request_review_comment" ]]; then
            # For comments, truncate them to a reasonable length in the shell
            COMMENT="${{ github.event.comment.body }}"
            TRUNCATED_COMMENT="${COMMENT:0:100}"
            echo "MESSAGE=ðŸ’¬ New review comment by *${{ github.event.comment.user.login }}*: _${TRUNCATED_COMMENT}_" >> $GITHUB_ENV
            echo "COLOR=${{ env.COLOR_PR_COMMENT }}" >> $GITHUB_ENV
          else
            echo "MESSAGE=Unknown event" >> $GITHUB_ENV
            echo "COLOR=${{ env.COLOR_UNKNOWN }}" >> $GITHUB_ENV
          fi

          # Set timestamp based on event type
          if [[ -n "${{ github.event.pull_request.updated_at }}" ]]; then
            echo "TIMESTAMP=${{ github.event.pull_request.updated_at }}" >> $GITHUB_ENV
          elif [[ -n "${{ github.event.comment.created_at }}" ]]; then
            echo "TIMESTAMP=${{ github.event.comment.created_at }}" >> $GITHUB_ENV  
          elif [[ -n "${{ github.event.pull_request_review.submitted_at }}" ]]; then
            echo "TIMESTAMP=${{ github.event.pull_request_review.submitted_at }}" >> $GITHUB_ENV
          else
            echo "TIMESTAMP=${{ github.event.pull_request.created_at }}" >> $GITHUB_ENV
          fi

      # Create payload file with simpler expressions
      - name: Create payload file
        id: create-payload
        run: |
          mkdir -p ./tmp
          cat > ./tmp/payload.json << EOF
          {
            "channel": "${{ env.SLACK_CHANNEL }}",
            "attachments": [
              {
                "color": "${{ env.COLOR }}",
                "pretext": "*${{ github.repository }}*",
                "title": "${{ github.event.pull_request.title }} #${{ github.event.pull_request.number }}",
                "title_link": "${{ github.event.pull_request.html_url }}",
                "text": "${{ env.MESSAGE }}",
                "footer": "GitHub Actions",
                "footer_icon": "https://github.githubassets.com/images/modules/logos_page/GitHub-Mark.png",
                "ts": "${{ env.TIMESTAMP }}"
              }
            ]
          }
          EOF

      - name: Send to Slack
        uses: slackapi/slack-github-action@v2.0.0
        with:
          payload-file-path: ./tmp/payload.json
          payload-templated: true
          webhook: ${{ secrets.SLACK_INCOMING_WEBHOOK_WEBHOOK_URL }}
          webhook-type: incoming-webhook
          errors: true