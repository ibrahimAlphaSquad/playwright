# This workflow sends notifications to Slack for various GitHub events related to pull requests.
name: Slack PR Notifications
on:
  pull_request:
    types:
      - opened
      - closed
      - reopened
      - synchronize
      - edited
      - assigned
      - unassigned
      - labeled
      - unlabeled
      - converted_to_draft
      - ready_for_review
      - review_requested
      - review_request_removed
  pull_request_review:
    types:
      - submitted
      - edited
      - dismissed
  pull_request_review_comment:
    types:
      - created
      - edited
      - deleted

# Add concurrency configuration to ensure ALL runs execute sequentially
concurrency:
  # Create a unique group key for each PR action to prevent any cancellation
  group: ${{ github.workflow }}-${{ github.event.pull_request.number || github.sha }}-${{ github.run_id }}
  # This ensures queued jobs don't get canceled
  cancel-in-progress: false

permissions:
  contents: read
  checks: read
  actions: read

env:
  # Channel ID must be used instead of channel name for Slack API
  SLACK_CHANNEL: alpha-pr-review
  SLACK_CHANNEL_ID: "C08R6EB1DEU" # Replace with your actual channel ID
  # Color scheme
  COLOR_PR_OPENED: "#28a745" # Green
  COLOR_PR_MERGED: "#28a745" # Green
  COLOR_PR_CLOSED: "#dc3545" # Red
  COLOR_PR_REOPENED: "#ffc107" # Yellow
  COLOR_PR_SYNCHRONIZED: "#17a2b8" # Blue
  COLOR_PR_REVIEW: "#007bff" # Blue
  COLOR_PR_COMMENT: "#28a745" # Green
  COLOR_PR_DRAFT: "#6c757d" # Gray
  COLOR_PR_READY: "#28a745" # Green
  COLOR_PR_ASSIGNED: "#9c27b0" # Purple
  COLOR_PR_LABELED: "#ff9800" # Orange
  COLOR_UNKNOWN: "#ffc107" # Yellow

  # Add an API endpoint for the Slack messages API
  SLACK_API_URL: "https://slack.com/api/chat.postMessage"

jobs:
  # Job 1: Handle only the initial PR creation event
  notify_pr_creation:
    name: Notify PR Creation
    # This job runs ONLY when a PR is opened
    if: github.event_name == 'pull_request' && github.event.action == 'opened'
    environment:
      name: Production
    runs-on: ubuntu-latest
    steps:
      # Create a unique thread identifier for the PR
      - name: Create PR thread identifier
        id: create-thread-id
        run: |
          # Create a consistent thread ID based on repository and PR number
          # This ensures all messages about the same PR use the same thread
          THREAD_KEY="${{ github.repository }}-pr-${{ github.event.pull_request.number }}"
          echo "THREAD_KEY=${THREAD_KEY}" >> $GITHUB_ENV
          echo "Created thread key: ${THREAD_KEY}"

      - name: Set event message
        id: event-message
        run: |
          # Common PR details that will be included in most messages
          PR_DETAILS="*Title:* ${{ github.event.pull_request.title }}\n*Branch:* ${{ github.event.pull_request.head.ref }} → ${{ github.event.pull_request.base.ref }}\n*Author:* ${{ github.event.pull_request.user.login }}\n*Created:* $(date -d "${{ github.event.pull_request.created_at }}" "+%Y-%m-%d %H:%M:%S UTC")"

          # Get PR body for description
          PR_BODY="${{ github.event.pull_request.body }}"
          # Truncate PR description to avoid too long messages
          if [ ${#PR_BODY} -gt 200 ]; then
            TRUNCATED_BODY="${PR_BODY:0:200}..."
          else
            TRUNCATED_BODY="$PR_BODY"
          fi

          # Details for new PR
          echo "MESSAGE=👀 *YO, NEW PR JUST DROPPED!*\n\n${PR_DETAILS}\n\n*Description:* ${TRUNCATED_BODY}" >> $GITHUB_ENV
          echo "COLOR=${{ env.COLOR_PR_OPENED }}" >> $GITHUB_ENV

          # Set current Unix timestamp for the message
          echo "TIMESTAMP=$(date +%s)" >> $GITHUB_ENV

      # Set Slack title and link environment variables
      - name: Set Slack title and link environment variables
        run: |
          echo "TITLE=${{ github.event.pull_request.title }}" >> $GITHUB_ENV
          echo "NUMBER=${{ github.event.pull_request.number }}" >> $GITHUB_ENV
          echo "TITLE_LINK=${{ github.event.pull_request.html_url }}" >> $GITHUB_ENV

      # Send initial PR notification to Slack
      - name: Send Slack notification
        id: send-notification
        run: |
          # Debug: Verify channel info
          echo "Using Slack channel ID: ${{ env.SLACK_CHANNEL_ID }}"

          # Create attachments JSON
          ATTACHMENTS=$(cat <<EOF
          [
            {
              "color": "${{ env.COLOR }}",
              "pretext": "*${{ github.repository }}*",
              "title": "${{ env.TITLE }} #${{ env.NUMBER }}",
              "title_link": "${{ env.TITLE_LINK }}",
              "text": "${{ env.MESSAGE }}",
              "footer": "GitHub Actions • Thread-Key: ${{ env.THREAD_KEY }}",
              "footer_icon": "https://github.githubassets.com/images/modules/logos_page/GitHub-Mark.png",
              "mrkdwn_in": ["text", "pretext", "footer"],
              "ts": "${{ env.TIMESTAMP }}"
            }
          ]
          EOF
          )

          # Debug: Print attachments for troubleshooting
          echo "Sending attachments to Slack API (truncated for security):"
          echo "$ATTACHMENTS" | jq '.[0].text = "REDACTED"' || echo "Failed to print truncated attachments"

          # Send the message using curl with form-urlencoded data
          RESPONSE=$(curl -s -X POST \
            "${{ env.SLACK_API_URL }}" \
            -H "Authorization: Bearer ${{ secrets.SLACK_USER_OAUTH_TOKEN }}" \
            -H "Content-Type: application/x-www-form-urlencoded" \
            --data-urlencode "channel=${{ env.SLACK_CHANNEL_ID }}" \
            --data-urlencode "attachments=$ATTACHMENTS" \
            --data-urlencode "link_names=true" \
            --data-urlencode "mrkdwn=true" \
            --data-urlencode "unfurl_links=false" \
            --data-urlencode "unfurl_media=false")

          # Debug: Log response
          echo "Response from Slack API: $RESPONSE"

          # Extract the thread_ts from the response
          RESPONSE_TS=$(echo "$RESPONSE" | jq -r '.ts')

          # Check if we got a valid timestamp
          if [[ "$RESPONSE_TS" != "null" ]]; then
            echo "Successfully sent message with thread_ts: $RESPONSE_TS"
            echo "RESPONSE_TS=$RESPONSE_TS" >> $GITHUB_ENV
            echo "THREAD_TS=$RESPONSE_TS" >> $GITHUB_ENV
            
            # Create a file with the thread_ts for artifact upload
            echo "$RESPONSE_TS" > thread-ts.txt
            
            # Debug output
            echo "Created file thread-ts.txt with content: $RESPONSE_TS"
          else
            echo "Failed to get thread_ts from Slack API response"
            echo "Response: $RESPONSE"
            exit 1
          fi

          # Check if the message was sent successfully
          if [[ "$(echo "$RESPONSE" | jq -r '.ok')" != "true" ]]; then
            echo "Failed to send Slack message: $(echo "$RESPONSE" | jq -r '.error')"
            exit 1
          fi

      # Store the thread_ts as an artifact for future workflow runs
      - name: Store thread timestamp
        uses: actions/upload-artifact@v4
        with:
          name: pr-${{ github.event.pull_request.number }}-thread-ts
          path: thread-ts.txt
          retention-days: 90

  # Job 2: Handle all other PR events
  notify_other_events:
    name: Notify Other Events
    # This job runs for all events EXCEPT the initial PR open
    if: always() && (github.event_name != 'pull_request' || github.event.action != 'opened')
    environment:
      name: Production
    runs-on: ubuntu-latest
    # Add dependency on the first job but allow it to run if the first job is skipped
    # (which happens for all events except PR creation)
    needs: [notify_pr_creation]
    # This ensures this job always runs even if the first job is skipped
    steps:
      - name: Wait and retry if dependency was skipped
        id: check-dependency
        run: |
          MAX_RETRIES=2
          RETRY_DELAY=60  # in seconds
          ATTEMPT=1
          while [[ "$ATTEMPT" -le "$MAX_RETRIES" ]]; do
            echo "Dependency job result inside of while loop: ${{ needs.notify_pr_creation.result }}"
            if [[  "${{ needs.notify_pr_creation.result }}" == "skipped" ]]; then
              if [[ "$ATTEMPT" -eq "$MAX_RETRIES" ]]; then
                echo "Max retries reached. Proceeding anyway."
                break
              fi
              echo "Job was skipped. Waiting 1 minute before retrying..."
              sleep "$RETRY_DELAY"
              ((ATTEMPT++))
            elif [[  "${{ needs.notify_pr_creation.result }}" == "success" ]]; then
              echo "Job completed successfully. Proceeding."
              break
            else
              echo "Job failed or was canceled with result: $STATUS"
              echo "Proceeding anyway since this is a notification job."
              break
            fi
          done

      # For synchronize events, fetch the latest commit message using GitHub API
      - name: Get commit message for synchronize event
        if: github.event_name == 'pull_request' && github.event.action == 'synchronize'
        id: get-commit-message
        env:
          GH_TOKEN: ${{ github.token }}
        run: |
          # Get the head commit SHA
          HEAD_SHA="${{ github.event.pull_request.head.sha }}"

          # Use GitHub CLI to get commit info
          COMMIT_INFO=$(gh api repos/${{ github.repository }}/commits/${HEAD_SHA})

          # Extract the commit message
          COMMIT_MSG=$(echo $COMMIT_INFO | jq -r '.commit.message')

          # Escape newlines and other special chars for GitHub Actions
          COMMIT_MSG=$(echo "$COMMIT_MSG" | tr '\n' ' ' | sed 's/"/\\"/g')

          # Set output - save commit message in a way that handles multiline messages
          echo "COMMIT_MESSAGE<<EOF" >> $GITHUB_ENV
          echo "$COMMIT_MSG" >> $GITHUB_ENV
          echo "EOF" >> $GITHUB_ENV

          # For debugging
          echo "Retrieved commit message for SHA: ${HEAD_SHA}"

      # Create a unique thread identifier for the PR
      - name: Create thread identifier
        id: create-thread-id
        run: |
          if [[ "${{ github.event_name }}" == "pull_request" || "${{ github.event_name }}" == "pull_request_review" || "${{ github.event_name }}" == "pull_request_review_comment" ]]; then
            # Create a consistent thread ID based on repository and PR number
            # This ensures all messages about the same PR use the same thread
            THREAD_KEY="${{ github.repository }}-pr-${{ github.event.pull_request.number }}"
            echo "THREAD_KEY=${THREAD_KEY}" >> $GITHUB_ENV
            echo "PR_NUMBER=${{ github.event.pull_request.number }}" >> $GITHUB_ENV
            echo "Created thread key: ${THREAD_KEY}"
            
            # Set PR-specific environment variables
            echo "EVENT_ID=${{ github.event.pull_request.number }}" >> $GITHUB_ENV
            echo "EVENT_TYPE=pr" >> $GITHUB_ENV
          fi

      # Download thread_ts from artifacts
      - name: Download thread timestamp
        id: download-ts
        uses: actions/download-artifact@v4
        with:
          name: ${{ env.EVENT_TYPE }}-${{ env.EVENT_ID }}-thread-ts
          path: ./
        continue-on-error: true # Continue if artifact doesn't exist yet

      # Load thread_ts from artifact file
      - name: Load thread timestamp
        id: load-ts
        run: |
          if [ -f "thread-ts.txt" ]; then
            THREAD_TS=$(cat thread-ts.txt)
            echo "THREAD_TS=${THREAD_TS}" >> $GITHUB_ENV
            echo "IS_THREADED_REPLY=true" >> $GITHUB_ENV
            echo "Found existing thread_ts: ${THREAD_TS}"
          else
            echo "No existing thread_ts found, will create a new top-level message"
            echo "IS_THREADED_REPLY=false" >> $GITHUB_ENV
          fi

      - name: Set event message
        id: event-message
        run: |
          # Common PR details that will be included in most messages
          if [[ "${{ github.event_name }}" == "pull_request" || "${{ github.event_name }}" == "pull_request_review" || "${{ github.event_name }}" == "pull_request_review_comment" ]]; then
            PR_DETAILS="*Title:* ${{ github.event.pull_request.title }}\n*Branch:* ${{ github.event.pull_request.head.ref }} → ${{ github.event.pull_request.base.ref }}\n*Author:* ${{ github.event.pull_request.user.login }}\n*Created:* $(date -d "${{ github.event.pull_request.created_at }}" "+%Y-%m-%d %H:%M:%S UTC")"
          fi

          if [[ "${{ github.event_name }}" == "pull_request" && "${{ github.event.action }}" == "closed" && "${{ github.event.pull_request.merged }}" == "true" ]]; then
            # Details for merged PR
            MERGE_DETAILS="*Merged by:* ${{ github.event.sender.login }}\n*Merge time:* $(date -d "${{ github.event.pull_request.merged_at }}" "+%Y-%m-%d %H:%M:%S UTC")"
            echo "MESSAGE=🥳 *IT'S GIVING MERGED!*\n\n${PR_DETAILS}\n\n${MERGE_DETAILS}" >> $GITHUB_ENV
            echo "COLOR=${{ env.COLOR_PR_MERGED }}" >> $GITHUB_ENV
            
          elif [[ "${{ github.event_name }}" == "pull_request" && "${{ github.event.action }}" == "closed" ]]; then
            # Details for closed PR without merging
            CLOSE_DETAILS="*Closed by:* ${{ github.event.sender.login }}\n*Close time:* $(date -d "${{ github.event.pull_request.closed_at }}" "+%Y-%m-%d %H:%M:%S UTC")"
            echo "MESSAGE=💀 *YIKES, PR GOT CANCELED*\n\n${PR_DETAILS}\n\n${CLOSE_DETAILS}" >> $GITHUB_ENV
            echo "COLOR=${{ env.COLOR_PR_CLOSED }}" >> $GITHUB_ENV
            
          elif [[ "${{ github.event_name }}" == "pull_request" && "${{ github.event.action }}" == "reopened" ]]; then
            # Details for reopened PR
            REOPEN_DETAILS="*Reopened by:* ${{ github.event.sender.login }}\n*Reopen time:* $(date "+%Y-%m-%d %H:%M:%S UTC")"
            echo "MESSAGE=🧟 *PR BACK FROM THE DEAD FR FR*\n\n${PR_DETAILS}\n\n${REOPEN_DETAILS}" >> $GITHUB_ENV
            echo "COLOR=${{ env.COLOR_PR_REOPENED }}" >> $GITHUB_ENV
            
          elif [[ "${{ github.event_name }}" == "pull_request" && "${{ github.event.action }}" == "synchronize" ]]; then
            # For synchronize events
            echo "MESSAGE=✨ *NEW COMMIT JUST DROPPED*\n\n*Commit SHA:* \`${{ github.event.pull_request.head.sha }}\`\n*Commit message:* ${{ env.COMMIT_MESSAGE }}" >> $GITHUB_ENV
            echo "COLOR=${{ env.COLOR_PR_SYNCHRONIZED }}" >> $GITHUB_ENV

          elif [[ "${{ github.event_name }}" == "pull_request" && "${{ github.event.action }}" == "edited" ]]; then
            # Details for edited PR
            EDIT_DETAILS="*Edited by:* ${{ github.event.sender.login }}\n*Edit time:* $(date "+%Y-%m-%d %H:%M:%S UTC")"
            # Check what was edited
            if [[ "${{ github.event.changes.title }}" != "" ]]; then
              EDIT_DETAILS="${EDIT_DETAILS}\n*Title changed:* ${{ github.event.changes.title.from }} → ${{ github.event.pull_request.title }}"
            fi
            if [[ "${{ github.event.changes.body }}" != "" ]]; then
              EDIT_DETAILS="${EDIT_DETAILS}\n*Description edited*"
            fi
            echo "MESSAGE=✏️ *PR GOT A GLOW UP*\n\n${PR_DETAILS}\n\n${EDIT_DETAILS}" >> $GITHUB_ENV
            echo "COLOR=${{ env.COLOR_UNKNOWN }}" >> $GITHUB_ENV

          elif [[ "${{ github.event_name }}" == "pull_request" && "${{ github.event.action }}" == "converted_to_draft" ]]; then
            # Details for draft conversion
            DRAFT_DETAILS="*Converted by:* ${{ github.event.sender.login }}\n*Time:* $(date "+%Y-%m-%d %H:%M:%S UTC")"
            echo "MESSAGE=⏳ *LOWKEY NOT READY YET, MARKED AS DRAFT*\n\n${PR_DETAILS}\n\n${DRAFT_DETAILS}" >> $GITHUB_ENV
            echo "COLOR=${{ env.COLOR_PR_DRAFT }}" >> $GITHUB_ENV

          elif [[ "${{ github.event_name }}" == "pull_request" && "${{ github.event.action }}" == "ready_for_review" ]]; then
            # Details for ready for review
            READY_DETAILS="*Marked ready by:* ${{ github.event.sender.login }}\n*Time:* $(date "+%Y-%m-%d %H:%M:%S UTC")"
            echo "MESSAGE=✅ *BIG SLAY! CODE LOOKS FIRE*\n\n${PR_DETAILS}\n\n${READY_DETAILS}" >> $GITHUB_ENV
            echo "COLOR=${{ env.COLOR_PR_READY }}" >> $GITHUB_ENV

          elif [[ "${{ github.event_name }}" == "pull_request" && "${{ github.event.action }}" == "assigned" ]]; then
            # Details for assigned PR
            ASSIGN_DETAILS="*Assigned to:* ${{ github.event.assignee.login }}\n*Assigned by:* ${{ github.event.sender.login }}\n*Time:* $(date "+%Y-%m-%d %H:%M:%S UTC")"
            echo "MESSAGE=👉 *THIS ONE'S YOURS NOW, NO CAP*\n\n${PR_DETAILS}\n\n${ASSIGN_DETAILS}" >> $GITHUB_ENV
            echo "COLOR=${{ env.COLOR_PR_ASSIGNED }}" >> $GITHUB_ENV

          elif [[ "${{ github.event_name }}" == "pull_request" && "${{ github.event.action }}" == "unassigned" ]]; then
            # Details for unassigned PR
            UNASSIGN_DETAILS="*Unassigned from:* ${{ github.event.assignee.login }}\n*Unassigned by:* ${{ github.event.sender.login }}\n*Time:* $(date "+%Y-%m-%d %H:%M:%S UTC")"
            echo "MESSAGE=🙅 *SIKE! NOT YOUR PROBLEM ANYMORE*\n\n${PR_DETAILS}\n\n${UNASSIGN_DETAILS}" >> $GITHUB_ENV
            echo "COLOR=${{ env.COLOR_PR_ASSIGNED }}" >> $GITHUB_ENV

          elif [[ "${{ github.event_name }}" == "pull_request" && "${{ github.event.action }}" == "labeled" ]]; then
            # Details for labeled PR
            LABEL_DETAILS="*Label added:* ${{ github.event.label.name }}\n*Added by:* ${{ github.event.sender.login }}\n*Time:* $(date "+%Y-%m-%d %H:%M:%S UTC")"
            echo "MESSAGE=🏷️ *VIBE CHECK: NEW LABEL ADDED*\n\n${PR_DETAILS}\n\n${LABEL_DETAILS}" >> $GITHUB_ENV
            echo "COLOR=${{ env.COLOR_PR_LABELED }}" >> $GITHUB_ENV

          elif [[ "${{ github.event_name }}" == "pull_request" && "${{ github.event.action }}" == "unlabeled" ]]; then
            # Details for unlabeled PR
            UNLABEL_DETAILS="*Label removed:* ${{ github.event.label.name }}\n*Removed by:* ${{ github.event.sender.login }}\n*Time:* $(date "+%Y-%m-%d %H:%M:%S UTC")"
            echo "MESSAGE=✂️ *LABEL GOT YEETED*\n\n${PR_DETAILS}\n\n${UNLABEL_DETAILS}" >> $GITHUB_ENV
            echo "COLOR=${{ env.COLOR_PR_LABELED }}" >> $GITHUB_ENV

          elif [[ "${{ github.event_name }}" == "pull_request" && "${{ github.event.action }}" == "review_requested" ]]; then
            # Details for review request
            REVIEWER=""
            if [[ -n "${{ github.event.requested_reviewer.login }}" ]]; then
              REVIEWER="${{ github.event.requested_reviewer.login }}"
            elif [[ -n "${{ github.event.requested_team.name }}" ]]; then
              REVIEWER="team ${{ github.event.requested_team.name }}"
            fi
            REVIEW_DETAILS="*Reviewer:* ${REVIEWER}\n*Requested by:* ${{ github.event.sender.login }}\n*Time:* $(date "+%Y-%m-%d %H:%M:%S UTC")"
            echo "MESSAGE=💯 *NEED UR EYES ON THIS, FAM*\n\n${PR_DETAILS}\n\n${REVIEW_DETAILS}" >> $GITHUB_ENV
            echo "COLOR=${{ env.COLOR_PR_REVIEW }}" >> $GITHUB_ENV

          elif [[ "${{ github.event_name }}" == "pull_request_review" && "${{ github.event.action }}" == "submitted" ]]; then
            # Details for PR review with different icons based on state
            REVIEW_STATE="${{ github.event.review.state }}"
            REVIEW_ICON="💬"
            REVIEW_PREFIX="*THOUGHTS DROPPED*"
            
            if [[ "${REVIEW_STATE}" == "approved" ]]; then
              REVIEW_ICON="✅"
              REVIEW_PREFIX="*BIG SLAY! CODE APPROVED*"
            elif [[ "${REVIEW_STATE}" == "changes_requested" ]]; then
              REVIEW_ICON="❌"
              REVIEW_PREFIX="*YIKES, FIX UR CODE PLS*"
            fi
            
            # Get truncated review body
            REVIEW_BODY="${{ github.event.review.body }}"
            
            if [ ${#REVIEW_BODY} -gt 150 ]; then
              TRUNCATED_REVIEW="${REVIEW_BODY:0:150}..."
            else
              TRUNCATED_REVIEW="$REVIEW_BODY"
            fi
            
            REVIEW_DETAILS="*Reviewer:* ${{ github.event.review.user.login }}\n*State:* ${REVIEW_STATE}\n*Time:* $(date -d "${{ github.event.review.submitted_at }}" "+%Y-%m-%d %H:%M:%S UTC")"
            if [[ -n "${TRUNCATED_REVIEW}" ]]; then
              REVIEW_DETAILS="${REVIEW_DETAILS}\n*Comment:* ${TRUNCATED_REVIEW}"
            fi
            
            echo "MESSAGE=${REVIEW_ICON} ${REVIEW_PREFIX}\n\n${PR_DETAILS}\n\n${REVIEW_DETAILS}" >> $GITHUB_ENV
            echo "COLOR=${{ env.COLOR_PR_REVIEW }}" >> $GITHUB_ENV

          elif [[ "${{ github.event_name }}" == "pull_request_review_comment" ]]; then
            # Details for PR review comment
            COMMENT="${{ github.event.comment.body }}"
            
            if [ ${#COMMENT} -gt 150 ]; then
              TRUNCATED_COMMENT="${COMMENT:0:150}..."
            else
              TRUNCATED_COMMENT="$COMMENT"
            fi
            
            # Fix for the bad substitution error by using an if statement
            PATH_WITH_LINE="${{ github.event.comment.path }}"
            if [[ -n "${{ github.event.comment.line }}" ]]; then
              PATH_WITH_LINE="${{ github.event.comment.path }}:${{ github.event.comment.line }}"
            fi
            
            COMMENT_DETAILS="*Commenter:* ${{ github.event.comment.user.login }}\n*Time:* $(date -d "${{ github.event.comment.created_at }}" "+%Y-%m-%d %H:%M:%S UTC")\n*Path:* ${PATH_WITH_LINE}"
            
            VERB="DROPPED"
            PREFIX="*NEW COMMENT JUST DROPPED*"
            if [[ "${{ github.event.action }}" == "edited" ]]; then
              VERB="EDITED"
              PREFIX="*COMMENT GOT EDITED*"
              COMMENT_DETAILS="${COMMENT_DETAILS}\n*Edited at:* $(date "+%Y-%m-%d %H:%M:%S UTC")"
            elif [[ "${{ github.event.action }}" == "deleted" ]]; then
              VERB="DELETED"
              PREFIX="*COMMENT GOT DELETED*"
            fi
            
            if [[ "${{ github.event.action }}" != "deleted" ]]; then
              COMMENT_DETAILS="${COMMENT_DETAILS}\n*Comment:* ${TRUNCATED_COMMENT}"
            fi
            
            echo "MESSAGE=💬 ${PREFIX}\n\n${PR_DETAILS}\n\n${COMMENT_DETAILS}" >> $GITHUB_ENV
            echo "COLOR=${{ env.COLOR_PR_COMMENT }}" >> $GITHUB_ENV
            
          else
            # Unknown events
            echo "MESSAGE=👽 *SOMETHING WEIRD HAPPENED, TBH*\n\n${PR_DETAILS}" >> $GITHUB_ENV
            echo "COLOR=${{ env.COLOR_UNKNOWN }}" >> $GITHUB_ENV
            echo "EVENT_TYPE=unknown" >> $GITHUB_ENV
            echo "EVENT_ID=${{ github.event.id }}" >> $GITHUB_ENV
            echo "EVENT ${{ github.event.action }}"
          fi

          # Set current Unix timestamp for the message
          echo "TIMESTAMP=$(date +%s)" >> $GITHUB_ENV

      # Set Slack title and link environment variables
      - name: Set Slack title and link environment variables
        run: |
          echo "TITLE=${{ github.event.pull_request.title }}" >> $GITHUB_ENV
          echo "NUMBER=${{ github.event.pull_request.number }}" >> $GITHUB_ENV
          echo "TITLE_LINK=${{ github.event.pull_request.html_url }}" >> $GITHUB_ENV

      # Send Slack notification with thread_ts when it's a reply
      - name: Send Slack notification
        id: send-notification
        run: |
          # Debug: Verify channel info
          echo "Using Slack channel ID: ${{ env.SLACK_CHANNEL_ID }}"

          # Create attachments JSON (multiline safely compressed later)
          RAW_ATTACHMENTS=$(cat <<EOF
          [
            {
              "color": "${{ env.COLOR }}",
              "title": "${{ env.TITLE }} #${{ env.NUMBER }}",
              "title_link": "${{ env.TITLE_LINK }}",
              "text": "${{ env.MESSAGE }}",
              "footer": "GitHub Actions • Thread-Key: ${{ env.THREAD_KEY }}",
              "footer_icon": "https://github.githubassets.com/images/modules/logos_page/GitHub-Mark.png",
              "mrkdwn_in": ["text", "pretext", "footer"],
              "ts": "${{ env.TIMESTAMP }}"
            }
          ]
          EOF
          )

          # Add pretext only for top-level messages
          if [[ "${{ env.IS_THREADED_REPLY }}" != "true" ]]; then
            RAW_ATTACHMENTS=$(echo "$RAW_ATTACHMENTS" | jq '.[0].pretext = "*${{ github.repository }}*"')
          fi

          # Compress the JSON to a single-line safe for --data-urlencode
          ATTACHMENTS=$(echo "$RAW_ATTACHMENTS" | jq -c '.')

          # Debug: Print redacted payload
          echo "Sending attachments to Slack API (truncated):"
          echo "$ATTACHMENTS" | jq '.[0].text = "REDACTED"' || echo "Failed to print attachments"

          # Build the curl command
          RESPONSE=$(curl -s -X POST "${{ env.SLACK_API_URL }}" \
            -H "Authorization: Bearer ${{ secrets.SLACK_USER_OAUTH_TOKEN }}" \
            -H "Content-Type: application/x-www-form-urlencoded" \
            --data-urlencode "channel=${{ env.SLACK_CHANNEL_ID }}" \
            --data-urlencode "attachments=$ATTACHMENTS" \
            --data-urlencode "link_names=true" \
            --data-urlencode "mrkdwn=true" \
            --data-urlencode "unfurl_links=false" \
            --data-urlencode "unfurl_media=false" \
            $( [[ "${{ env.IS_THREADED_REPLY }}" == "true" ]] && echo "--data-urlencode thread_ts=${{ env.THREAD_TS }}" )
          )

          # Debug: Log raw response
          echo "Response from Slack API: $RESPONSE"

          # Extract attachment timestamp
          RESPONSE_TS=$(echo "$RESPONSE" | jq -r '.message.attachments[0].ts')
          THREAD_TS=$RESPONSE_TS

          # If threaded reply, retain the passed thread_ts
          if [[ "${{ env.IS_THREADED_REPLY }}" == "true" ]]; then
            THREAD_TS="${{ env.THREAD_TS }}"
          fi

          # Export for other steps
          echo "RESPONSE_TS=$RESPONSE_TS" >> $GITHUB_ENV
          echo "THREAD_TS=$THREAD_TS" >> $GITHUB_ENV

          # Check if message was sent successfully
          if [[ "$(echo "$RESPONSE" | jq -r '.ok')" != "true" ]]; then
            echo "Failed to send Slack message: $(echo "$RESPONSE" | jq -r '.error')"
            exit 1
          fi

      # Store thread_ts in artifact if this is the first message in a thread
      - name: Store new thread timestamp
        if: env.IS_THREADED_REPLY != 'true'
        run: |
          # Create a file with the thread_ts
          echo "${{ env.RESPONSE_TS }}" > thread-ts.txt
          echo "Created file thread-ts.txt with content: ${{ env.RESPONSE_TS }}"

      # Upload artifact with the thread_ts using unified artifact naming
      - name: Upload thread artifact
        if: env.IS_THREADED_REPLY != 'true'
        uses: actions/upload-artifact@v4
        with:
          name: ${{ env.EVENT_TYPE }}-${{ env.EVENT_ID }}-thread-ts
          path: thread-ts.txt
          retention-days: 90
